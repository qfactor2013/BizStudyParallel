(1) 인덱스를 사용하는 것이 효율적인 경우
WHERE절이나 JOIN조건에 주로 사용되는 컬럼
테이블에 행의 수가 많은 경우
UNIQUE속성의 컬럼이나 NULL이 많이 포함된 컬럼
검색 결과가 데이터의 2%~4%정도 일 때
NULL을 포함하는 컬럼이 많은 경우 
?
(2) 인덱스를 사용하지 않는 것이 더 효율적인 경우
테이블이 작은 경우(데이터가 적은 경우)
데이터갱신이 자주 발생하는 경우
다량의 데이터가 조회되는 경우

 Index사용 불가: 
          Index column에 대한 가공, 부정형 비교,?IS NOT NULL 비교



**table생성
Create table empidxtest As select *  from employees;
**서브쿼리로 복사한 테이블은 구조와 내용만 복사, 제약조건 제외 확인

select   index_name, table_name,  column_name
From user_ind_columns 
where  table_name = 'EMPIDXTEST';

insert into empidxtest select *  from employees;
insert into empidxtest select *  from employees;
**조회대상 데이터 입력 
insert into empidxtest
(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL, hire_date, job_id)
values(1,'aa','b','c', sysdate,'AD_VP');
**인덱스 없을때와 있을때의 시간차이 알아보기 (set timing on) 
Select * from empidxtest where FIRST_NAME=‘aa’;
Create Index idx_empidxtest on empidxtest(FIRST_NAME);
Select * from empidxtest where FIRST_NAME=‘aa’;



쿼리문을 사용하는 개발자 입장에서 어떻게 SQL문을 작성할까?

바인드 변수를 사용한다.
가급적 WHERE조건에서는 인덱스 칼럼을 모두 사용한다.
인덱스  칼럼에 사용하는 연산자는 가급적 동등 연산자(=)를 사용한다. 
인덱스 칼럼은 변형하여 사용하지 않도록 한다. 
OR보다는 AND를 사용한다.
그룹핑 쿼리를 사용할 경우 가급적 HAVING보다는 WHERE절에서 데이터를 필터링한다.
DISTINCT는 가급적 사용하지 않는다. ? 내부적 정렬작업을 수반
IN,NOT IN 대신에 EXISTS, NOT EXISTS를 사용한다.
SET연산자 사용시 UNION대신 UNION ALL을 사용한다. 





